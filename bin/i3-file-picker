#!/usr/bin/env perl

# i3-file-picker --- a basic file chooser implementation for dmenu

# Copyright (C) 2024 Daniel Hennigar

# Author: Daniel Hennigar

# This program is free software; you can redistribute it and/or modify
# it under the terms of either:

#   a) the Artistic License 2.0, or
#   b) the GNU General Public License as published by the Free Software
#      Foundation; either version 3, or (at your option) any later version.

# See the LICENSE file for more information.

use 5.040;
use strict;
use warnings;
use File::Spec;
use Cwd;
use IPC::Open2;
use Getopt::Long;

my $usage = "Invalid options. Usage: $0 [--show-hidden | -s]
See 'perldoc $0' for documentation.\n";
my $picker_cmd  = 'dmenu -i';    # Change this to 'dmenu' if desired
my $show_hidden = 0;
my $help = 0;

GetOptions(
    'dmenu-command|d' => \$picker_cmd,
    'show-hidden|s' => \$show_hidden,
    'help|h' => \$help,
	)
  or die "$usage";
die "$usage" if $help;

sub run_picker {
    my @options = @_;
    return unless @options;

    my ( $picker_out, $picker_in );
    my $pid = open2( $picker_out, $picker_in, $picker_cmd )
      or die "Failed to open picker: $!";

    print $picker_in join( "\n", @options );
    close($picker_in);

    my $selection = <$picker_out>;
    close($picker_out);
    waitpid( $pid, 0 );

    chomp($selection) if $selection;
    return $selection;
}

my $current_dir = $ENV{HOME} or die "HOME environment variable not set.";

while (1) {

    opendir( my $dh, $current_dir )
      or die "Failed to open directory '$current_dir': $!";
    my @entries = sort readdir($dh);
    closedir($dh);

    @entries = grep { $_ =~ /^\.\.?$|^[^\.]/ || $show_hidden } @entries;

    @entries =
      map { -d File::Spec->catfile( $current_dir, $_ ) ? "$_/" : $_ } @entries;

    my $choice = run_picker(@entries);
    last unless defined $choice;

    my $is_directory = ( $choice =~ s{/$}{} );

    if ($is_directory) {

        $current_dir = File::Spec->catfile( $current_dir, $choice );
        $current_dir = Cwd::abs_path($current_dir)
          or die "Failed to resolve path: $!";
    }
    else {
        my $file_path = File::Spec->catfile( $current_dir, $choice );
        system( 'xdg-open', $file_path ) == 0
          or warn "Failed to open file '$file_path': $!";
        last;
    }
}

__END__

=pod

=head1 NAME

i3-file-picker - use dmenu (or equivalent) as a simple file explorer

=head1 SYNOPSIS

  i3-new-workspace [--show-hidden] [dmenu-command '<command>'][--help]

=head1 DESCRIPTION

Use dmenu, or a compatible menu program like rofi, as a simple file picker starting in the user's $HOME directory. Once a file is chosen, it will be opened with xdg-open.

=head1 OPTIONS

=over 4

=item * --help

=item * --show-hidden - show hidden files begining with "."

=item * --dmenu-command '<command>' - specify an alternative to dmenu (e.g., 'fuzzel -d')

=back

=head1 AUTHOR

Daniel Hennigar

=head1 LICENSE

Licensed under the Artistic License 2.0 and GNU GPL.

=cut
