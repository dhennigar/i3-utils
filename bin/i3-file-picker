#!/usr/bin/env perl

# i3-file-picker --- a basic file chooser implementation for dmenu

# Copyright (C) 2024 Daniel Hennigar

# Author: Daniel Hennigar

# This program is free software; you can redistribute it and/or modify
# it under the terms of either:

#   a) the Artistic License 2.0, or
#   b) the GNU General Public License as published by the Free Software
#      Foundation; either version 3, or (at your option) any later version.

# See the LICENSE file for more information.

use strict;
use warnings;
use File::Spec;
use Cwd;
use IPC::Open2;
use Getopt::Long;

# Variables
my $picker_cmd  = 'dmenu -i';    # Change this to 'dmenu' if desired
my $show_hidden = 0;

# Parse command-line options
GetOptions( 'show-hidden|s' => \$show_hidden, )
  or die "Invalid options. Usage: $0 [--show-hidden | -s]\n";

# Function to run a picker and get user selection
sub run_picker {
    my @options = @_;
    return unless @options;

    my ( $picker_out, $picker_in );
    my $pid = open2( $picker_out, $picker_in, $picker_cmd )
      or die "Failed to open picker: $!";

    # Send options to the picker
    print $picker_in join( "\n", @options );
    close($picker_in);

    # Get the user's selection
    my $selection = <$picker_out>;
    close($picker_out);
    waitpid( $pid, 0 );

    chomp($selection) if $selection;
    return $selection;
}

# Start in the user's home directory
my $current_dir = $ENV{HOME} or die "HOME environment variable not set.";

while (1) {

    # Get the contents of the current directory
    opendir( my $dh, $current_dir )
      or die "Failed to open directory '$current_dir': $!";
    my @entries = sort readdir($dh);
    closedir($dh);

    # Keep '.' and '..' but filter hidden files unless --show-hidden is enabled
    @entries = grep { $_ =~ /^\.\.?$|^[^\.]/ || $show_hidden } @entries;

    # Prepend directory names with a slash for differentiation
    @entries =
      map { -d File::Spec->catfile( $current_dir, $_ ) ? "$_/" : $_ } @entries;

    # Run the picker
    my $choice = run_picker(@entries);
    last unless defined $choice;

    # Remove trailing slash if it's a directory
    my $is_directory = ( $choice =~ s{/$}{} );

    if ($is_directory) {

        # Change to the selected directory
        $current_dir = File::Spec->catfile( $current_dir, $choice );
        $current_dir = Cwd::abs_path($current_dir)
          or die "Failed to resolve path: $!";
    }
    else {
        # Open the selected file
        my $file_path = File::Spec->catfile( $current_dir, $choice );
        system( 'xdg-open', $file_path ) == 0
          or warn "Failed to open file '$file_path': $!";
        last;
    }
}
