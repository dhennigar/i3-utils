#!/usr/bin/env perl

# i3-select-theme --- Update GTK, Emacs, Alacritty, and Fuzzel themes

# Copyright Â© 2025 Daniel Hennigar

# This program is free software: you can redistribute it and/or modify
# it under the terms of either:
#
#   a) the Artistic License 2.0, or
#   b) the GNU General Public License as published by the Free Software
#      Foundation; either version 3 of the License, or (at your option) any
#      later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the LICENSE file
# for more details.

use 5.040;
use Carp;
use English qw(-no_match_vars);
use Fcntl qw(:flock);
use File::Copy;
use Getopt::Std;

my $lock_file = '/tmp/i3-select-theme.lock';
open my $lock, '>', $lock_file ## no critic (InputOutput::RequireBriefOpen)
  or croak "$OS_ERROR";

carp 'No display environment available. Exiting.'
  unless $ENV{DISPLAY} || $ENV{WAYLAND_DISPLAY};

my %opts;
getopts( 'hd:', \%opts );

if ( $opts{h} ) {
    say "Usage: $0 [options]";
    say "See perldoc $0 for documentation.";
    exit 0;
}

my $dmenu = $opts{d} // 'fuzzel -d -l 6 -p "Select theme > "';

my $theme = $ARGV[0]
  // qx(echo -e "day\nnight\nmorning\nbright\n" | $dmenu);
chomp $theme;

print "$theme\n";

if ( $theme eq "" ) {
    carp 'No theme selected. Exiting.';
}

sub update_fuzzel {
    my %colors = @_;
    my $file   = "$ENV{HOME}/.config/fuzzel/fuzzel.ini";
	my $max_size = 10 * 1024;  # 10 KB limit

	if (-s $file > $max_size) {
		carp "File $file exceeds $max_size bytes. Aborting to prevent corruption.";
	}

    open my $fh, '+<', $file ## no critic (InputOutput::RequireBriefOpen)
      or carp "Cannot open $file for reading/writing: $!";
    my @lines;
    while (<$fh>) {
        if (/^(\w+)=/x) {    # Match lines with a key=value format
            my $key = $1;
            s/^(\w+)=.*/$key=$colors{$key}/x
              if exists $colors{$key};    # Update line if key exists
        }
        push @lines, $_;
    }
    seek $fh, 0, 0 or carp "Cannot seek in $file: $!";
    print $fh @lines;
    truncate $fh, tell($fh) or carp "Cannot truncate $file: $!";
    close $fh or carp "Error closing $file: $!";

	return 0;
}

sub run_command {
    my ($cmd) = @_;
    system($cmd) == 0 or carp "Failed to execute: $cmd\nExit code: $?";
	return 0;
}

if ( $theme eq "day" ) {
    copy( "$ENV{HOME}/.config/alacritty/themes/tomorrow-day.toml",
        "$ENV{HOME}/.config/alacritty/colors.toml" )
      or carp "Copy failed: $!";
    run_command(
        "gsettings set org.gnome.desktop.interface color-scheme prefer-light");
    run_command("emacsclient -e \"(load-theme-disable-others 'tomorrow-day)\"");
    update_fuzzel(
        background      => "ffffffff",
        text            => "4d4d4cff",
        prompt          => "4d4d4cff",
        placeholder     => "8e908cff",
        input           => "4d4d4cff",
        match           => "4271aeff",
        selection       => "d6d6d6ff",
        selection_text  => "4d4d4cff",
        selection_match => "c82829ff",
        counter         => "8e908cff"
    );
}
if ( $theme eq "night" ) {
    copy( "$ENV{HOME}/.config/alacritty/themes/tomorrow-night.toml",
        "$ENV{HOME}/.config/alacritty/colors.toml" )
      or carp "Copy failed: $!";
    run_command(
        "gsettings set org.gnome.desktop.interface color-scheme prefer-dark");
    run_command(
        "emacsclient -e \"(load-theme-disable-others 'tomorrow-night)\"");
    update_fuzzel(
        background      => "1d1f21ff",
        text            => "c5c8c6ff",
        prompt          => "c5c8c6ff",
        placeholder     => "969896ff",
        input           => "c5c8c6ff",
        match           => "81a2beff",
        selection       => "373b41ff",
        selection_text  => "c5c8c6ff",
        selection_match => "cc6666ff",
        counter         => "969896ff"
    );
}
if ( $theme eq "morning" ) {
    copy( "$ENV{HOME}/.config/alacritty/themes/tomorrow-morning.toml",
        "$ENV{HOME}/.config/alacritty/colors.toml" )
      or carp "Copy failed: $!";
    run_command(
        "gsettings set org.gnome.desktop.interface color-scheme prefer-light");
    run_command(
        "emacsclient -e \"(load-theme-disable-others 'tomorrow-morning)\"");
    update_fuzzel(
        background      => "fff0d0ff",
        text            => "4d4d4cff",
        prompt          => "4d4d4cff",
        placeholder     => "8e908cff",
        input           => "4d4d4cff",
        match           => "4271aeff",
        selection       => "e6d6a0ff",
        selection_text  => "4d4d4cff",
        selection_match => "c82829ff",
        counter         => "8e908cff"
    );
}
if ( $theme eq "bright" ) {
    copy( "$ENV{HOME}/.config/alacritty/themes/tomorrow-bright.toml",
        "$ENV{HOME}/.config/alacritty/colors.toml" )
      or carp "Copy failed: $!";
    run_command(
        "gsettings set org.gnome.desktop.interface color-scheme prefer-dark");
    run_command(
        "emacsclient -e \"(load-theme-disable-others 'tomorrow-bright)\"");
    update_fuzzel(
        background      => "000000ff",
        text            => "eaeaeaff",
        prompt          => "eaeaeaff",
        placeholder     => "969896ff",
        input           => "eaeaeaff",
        match           => "7aa6daff",
        selection       => "424242ff",
        selection_text  => "eaeaeaff",
        selection_match => "d54e53ff",
        counter         => "969896ff"
    );
}

END { close $lock if defined $lock }

__END__

=head1 NAME

i3-select-theme

=head1 SYNOPSIS

i3-select-theme [day, night, morning, bright]

=head1 DESCRIPTION

Update GTK, Emacs, Alacritty, and Fuzzel to matching "day", "night", "morning",
or "bright" themes. Themes may be passed as a command line argument or, if none
is provided, selected via Fuzzel (or any other dmenu-compliant menu program).

=head1 COPYRIGHT

Copyright (C) 2025 Daniel Hennigar

This script is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

=cut
