#!/usr/bin/env perl

# i3-cycle-focus --- emulate "Alt-Tab" behaviour in sway/i3

# Copyright (C) 2024 Daniel Hennigar

# This program is free software; you can redistribute it and/or modify
# it under the terms of either:

#   a) the Artistic License 2.0, or
#   b) the GNU General Public License as published by the Free Software
#      Foundation; either version 3, or (at your option) any later version.

# See the LICENSE file for more information.

use 5.040;
use strict;
use warnings;
use Getopt::Long;
use AnyEvent::I3 qw(:all);
use i3::Utils    qw(find_node find_nodes);

# Initialize variables
my $usage = "Usage: $0 [--reverse] [--help]
See 'perldoc $0' for documentation.\n";
my $reverse = 0;
my $help    = 0;

GetOptions(
    'reverse' => \$reverse,
    'help'    => \$help
) or die "$usage";
die "$usage" if $help || @ARGV;

my $i3 = i3();
$i3->connect->recv or die "Failed to connect to i3.";

my $initial_tree = $i3->get_tree->recv;
die "Could not get tree" unless $initial_tree;

my $focused;
my @siblings;

# update currently focused window and list of sibling nodes
sub update_data {
    my ($tree) = @_;

    $i3->get_workspaces->cb(
        sub {
            my ($workspaces_condvar) = @_;
	    my $workspaces_array_ref = $workspaces_condvar->{_ae_sent}[0];

	    my $current_workspace_name;	    
            foreach my $ws (@$workspaces_array_ref) {
                if ( $ws->{focused} ) {
                    $current_workspace_name = $ws->{name};
                }
            }
            die "Could not get current workspace name."
              unless $current_workspace_name;
	    
            my $is_current_workspace = sub {
                $_[0]->{type} eq 'workspace'
                  && $_[0]->{name} eq $current_workspace_name;
            };
            my $workspace = find_node( $tree, $is_current_workspace );
            die "Could not get current workspace." unless $workspace;

            my $is_focused = sub { $_[0]->{focused} };
            $focused = find_node( $workspace, $is_focused );
            die "Could not find focused window." unless $focused;

            my $has_name = sub { $_[0]->{name} && $_[0]->{name} ne '' };
            @siblings = find_nodes( $workspace, $has_name );
	    die "Could not find sibling nodes." unless @siblings;
        }
    );
}

# focus the next sibling before/after the currently focused window
sub cycle_focus {

    my ($reverse) = @_;
    @siblings = reverse @siblings if $reverse;

    my $index = 0;
    $index++
      while $index < @siblings && $siblings[$index]{id} != $focused->{id};
    my $next_id = $siblings[ ( $index + 1 ) % @siblings ]{id};

    $i3->command("[con_id=$next_id] focus");
}

# initialize variables with the initial tree on startup
update_data($initial_tree);

# update data on window events, cycle focus on tick events
$i3->subscribe(
    {
        window => sub {
            my ($event) = shift;
            if ( $event->{change} eq 'focus' ) {
                $i3->get_tree->cb(
                    sub {
                        my ($tree_condvar) = @_;
			my $tree = $tree_condvar->{_ae_sent}[0];
                        update_data($tree);
                    }
                );
            }
        },
        tick => sub {
            my ($event) = shift;
	    if ( $event->{first} ) {
		return;
	    }
            if ( $event->{payload} eq 'cycle-focus' ) {
                cycle_focus(0);
            }
	    if ( $event->{payload} eq 'cycle-focus-reverse') {
		cycle_focus(1);
	    }
        }
    }
)->recv->{success} or die "Error subscribing to events.";

AE::cv->recv;

__END__

=pod

=head1 NAME

i3-cycle-focus - Cycle through the windows on the current i3/sway workspace

=head1 SYNOPSIS

=over 4

i3-cycle-focus [--reverse] [--help]

=back

=head1 DESCRIPTION

Emulate 'alt-tab' behavior for i3/sway, cycling the focus among the windows on the current workspace.

=head1 OPTIONS

=over 4

=item * --help

=item * --reverse - reverse the direction of cycling

=back

=head1 AUTHOR

Daniel Hennigar

=head1 LICENSE

Licensed under the Artistic License 2.0 and GNU GPL.

=cut
