#!/usr/bin/env perl

# i3-cycle-focus --- emulate "Alt-Tab" behaviour in sway/i3

# Copyright (C) 2024 Daniel Hennigar

# This program is free software; you can redistribute it and/or modify
# it under the terms of either:

#	a) the Artistic License 2.0, or
#	b) the GNU General Public License as published by the Free Software
#	   Foundation; either version 3, or (at your option) any later version.

# See the LICENSE file for more information.

use 5.040;
use Carp;
use English      qw(-no_match_vars);
use Getopt::Long qw(:config auto_help auto_version);
use AnyEvent::I3 qw(:all);
use i3::Utils    qw(find_node find_nodes);

our $VERSION = '0.01';

GetOptions() or croak 'Could not parse options';

my $i3 = i3();
$i3->connect->recv or croak 'Failed to connect to i3.';

my $initial_tree = $i3->get_tree->recv
  or croak 'Could not get initial tree';

my $focused;
my @siblings;

sub update_data {
    my ($tree) = @_;

    $i3->get_workspaces->cb(
        sub {
            my @workspaces = @{ $_[0]->{_ae_sent}[0] };

            my $current_workspace_name;
            foreach my $ws (@workspaces) {
                if ( $ws->{focused} ) {
                    $current_workspace_name = $ws->{name};
                }
            }
            if ( not $current_workspace_name ) {
                carp 'Could not get current workspace name.';
                return 0;
            }

            my $is_current_workspace = sub {
                $_[0]->{type} eq 'workspace'
                  && $_[0]->{name} eq $current_workspace_name;
            };
            my $workspace = find_node( $tree, $is_current_workspace );
            if ( not $workspace ) {
                carp 'Could not get current workspace.';
                return 0;
            }

            my $is_focused = sub { $_[0]->{focused} };
            $focused = find_node( $workspace, $is_focused );
            if ( not $focused ) {
                carp 'Could not find focused window';
                return 0;
            }

            my $has_name =
              sub { defined $_[0]->{name} && length $_[0]->{name} };
            @siblings = find_nodes( $workspace, $has_name );
            if ( not @siblings ) {
                carp 'Could not find sibling nodes.';
                return 0;
            }
        }
    );
    return 1;
}

# focus the next sibling before/after the currently focused window
sub cycle_focus {

    my ($reverse) = @_;
    if ($reverse) { @siblings = reverse @siblings }

    my $index = 0;
    while ( $index < @siblings && $siblings[$index]{id} != $focused->{id} ) {
        $index++;
    }
    my $next_id = $siblings[ ( $index + 1 ) % @siblings ]{id}
      or croak 'Could not find next ID';

    $i3->command("[con_id=$next_id] focus")
      or croak 'Could not send i3 command.';

    return (1);
}

# initialize variables with the initial tree on startup
update_data($initial_tree);

# update data on window events, cycle focus on tick events
$i3->subscribe(
    {
        window => sub {
            my ($event) = shift;
            if ( $event->{change} eq 'focus' ) {
                my $timer;
                $timer = AnyEvent->timer(
                    after => 0.1,
                    cb    => sub {
                        $i3->get_tree->cb(
                            sub {
                                my ($tree_condvar) = @_;
                                my $tree = $tree_condvar->{_ae_sent}[0];
                                update_data($tree);
                            }
                        );
                        undef $timer;
                    }
                );
            }
        },
        tick => sub {
            my ($event) = shift;
            if ( $event->{first} ) {
                return;
            }
            if ( $event->{payload} eq 'cycle-focus' ) {
                cycle_focus(0);
            }
            if ( $event->{payload} eq 'cycle-focus-reverse' ) {
                cycle_focus(1);
            }
        },
        shutdown => sub {
            exit 0;
        }
    }
)->recv->{success} or croak 'Could not subscribe to i3 events.';

$i3->subscribe(
    {
        _error => sub {
            croak 'Error in i3 connection';
        }
    }
)->recv;

AE::cv->recv;

__END__

=pod

=head1 NAME

i3-cycle-focus - Cycle through the windows on the current i3/sway workspace

=head1 SYNOPSIS

=over 4

    i3-cycle-focus [options]

=back

=head1 DESCRIPTION

Emulate 'alt-tab' behavior for i3/sway, cycling the focus among the windows on the current workspace. I find this easier than managing "containers" myself.

=head1 OPTIONS

=over 4

=item B<--help>

Print help information

=item B<--reverse>

Reverse the direction of focus cycling (often this is counter-clockwise)

=back

=head1 AUTHOR

Daniel Hennigar <danrhennigar@gmail.com>

=head1 LICENSE AND COPYRIGHT

Copyright (C) 2025 Daniel Henngiar

Licensed under the Artistic License 2.0 and GNU GPL.

=cut
