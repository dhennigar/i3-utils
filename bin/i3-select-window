#!/usr/bin/env perl

# i3-select-window --- use dmenu to focus a window in i3/sway

# Copyright (C) 2024 Daniel Hennigar

# Author: Daniel Hennigar

# This program is free software; you can redistribute it and/or modify
# it under the terms of either:

#   a) the Artistic License 2.0, or
#   b) the GNU General Public License as published by the Free Software
#      Foundation; either version 3, or (at your option) any later version.

# See the LICENSE file for more information.

use strict;
use warnings;
use Getopt::Long;
use AnyEvent::I3;
use IPC::Open2;

my $usage = "Usage: $0 [--dmenu-command <command>] [--help]\n";
my $dmenu_cmd = 'dmenu -i -p "Select window > "';
my $help = 0;
GetOptions(
    'dmenu-command' => \$dmenu_cmd,
    'help' => \$help
) or die "$usage";
die "$usage" if $help || @ARGV;

my $i3 = AnyEvent::I3->new;
$i3->connect->recv or die "Failed to connect to i3";

my $tree_data = $i3->get_tree->recv;

sub extract_windows {
    my ( $node, $output, $workspace ) = @_;
    my @windows;

    if ( exists $node->{id}
        && ( exists $node->{app_id} || exists $node->{shell} ) )
    {
        push @windows,
          {
            id        => $node->{id},
            name      => $node->{name}   // 'Unnamed',
            app_id    => $node->{app_id} // 'Unknown App',
            workspace => $workspace,
            output    => $output
          };
    }

    for my $child ( @{ $node->{nodes} // [] } ) {
        push @windows, extract_windows( $child, $output, $workspace );
    }

    return @windows;
}

my %window_map;
my @choices;

for my $output_node ( @{ $tree_data->{nodes} } ) {
    my $output_name = $output_node->{name};
    for my $workspace_node ( @{ $output_node->{nodes} } ) {
        my $workspace_name = $workspace_node->{name};
        my @windows =
          extract_windows( $workspace_node, $output_name, $workspace_name );
        for my $window (@windows) {
            my $choice = sprintf(
                "%s [%s] %s (on %s)",
                $window->{name},   $window->{workspace},
                $window->{app_id}, $window->{output}
            );
            push @choices, $choice;
            $window_map{$choice} = $window->{id};
        }
    }
}

my $selected;
{
    my ( $dmenu_out, $dmenu_in );
    my $pid = open2( $dmenu_out, $dmenu_in, $dmenu_cmd )
      or die "Failed to open dmenu: $!";

    binmode( $dmenu_in,  ":encoding(UTF-8)" );
    binmode( $dmenu_out, ":encoding(UTF-8)" );

    print $dmenu_in join( "\n", @choices );
    close($dmenu_in);

    $selected = <$dmenu_out>;
    close($dmenu_out);
    waitpid( $pid, 0 );
}

chomp $selected if $selected;
exit unless $selected;

if ( my $window_id = $window_map{$selected} ) {
    $i3->command("[con_id=$window_id] focus")->recv;
}
else {
    warn "No matching window found for selection: $selected";
}

__END__

=pod

=head1 NAME

i3-select-window - Use dmenu to pick a window to focus in i3

=head1 SYNOPSIS

  i3-select-window [--dmenu-command '<command>'] [--help]

=head1 DESCRIPTION

Using dmenu (or another compatible menu program like rofi or fuzzel), select a window in i3 or sway to focus. Includes windows on all workspaces.

=head1 OPTIONS

=over 4

=item * --help

=item * --dmenu-command '<command>' - accepts an executable command to replace dmenu (e.g., fuzzel -d)

=back

=head1 AUTHOR

Daniel Hennigar

=head1 LICENSE

Licensed under the Artistic License 2.0 and GNU GPL.

=cut
