#!/usr/bin/perl

# i3-title-status.pl --- print status info in the focused window title bar

# Copyright (c) 2024 Daniel Hennigar

# This program is free software; you can redistribute it and/or modify
# it under the terms of either:
#
#   a) the Artistic License 2.0, or
#   b) the GNU General Public License as published by the Free Software
#      Foundation; either version 3, or (at your option) any later version.
#
# See the LICENSE file for more information.

use 5.040;
use strict;
use warnings;
use Getopt::Std;
use AnyEvent::I3 qw(:all);
use POSIX        qw(strftime);

my $format  = '[%clock][%date][%battery_charge% %battery_status] %title';
my $warning = 0;
my $battery_was_low = 0;

my %opts;
getopts( 'hf:w', \%opts );
if ( $opts{h} ) {
    say "Usage: $0 [options]";
    say "See perldoc $0 for documentation.";
    exit 0;
}
if ( $opts{f} ) {
    $format = $opts{f};
}
$warning = 1 if $opts{w};

my $i3 = i3();
$i3->connect->recv or die "Error connecting to i3.";
say "Connected to i3.";

sub update_and_send_commands {

    # clock
    my $clock = strftime( "%H:%M",    localtime );
    my $date  = strftime( "%d-%b-%Y", localtime );

    # battery
    my $battery_charge = do {
        open my $fh, '<', '/sys/class/power_supply/BAT0/capacity' or die $!;
        <$fh>;
    };
    chomp($battery_charge);
    my $battery_status = do {
        open my $fh, '<', '/sys/class/power_supply/BAT0/status' or die $!;
        <$fh>;
    };
    chomp($battery_status);

    my %battery_symbols = (
        "Discharging" => "-",
        "Charging"    => "+"
    );
    my $battery_symbol = $battery_symbols{$battery_status} // "";

    # # binding state
    # my $response;
    # my $condvar = AnyEvent->condvar;
    # $i3->message(TYPE_GET_BINDING_STATE)->cb(sub {
    # 		my ($response_cv) = shift;
    # 		$response = $response_cv->recv;
    # 	});
    # $condvar->recv;
    # say "Binding State: $response";

    # format string
    my $status = $format;
    $status =~ s/%clock/$clock/g;
    $status =~ s/%date/$date/g;
    $status =~ s/%battery_charge/$battery_charge/g;
    $status =~ s/%battery_status/$battery_status/g;
    $status =~ s/%battery_symbol/$battery_symbol/g;

    # send command
    say "Updating title status.";
    $i3->command(
        "[workspace=__focused__] title_format \"%title\"; title_format $status"
    );

    # change the window border color based on battery status
    if ($warning) {
        say "Window warning enabled.";
        if ( int($battery_charge) <= 10 && $battery_status eq "Discharging" ) {
            if ( !$battery_was_low ) {
                say "Battery low.";
                $battery_was_low = 1;
                $i3->command(
"client.focused \"#FF0000\" \"#FF0000\" \"#FFFFFF\" \"#FF0000\" "
                );
            }
        }
        else {
            if ($battery_was_low) {
                say "Battery no longer low.";
                $battery_was_low = 0;
                $i3->command(
"client.focused \"#3660d0\" \"#3660d0\" \"#FFFFFF\" \"#4670e0\" "
                );
            }
        }
    }
}

# update status line when window focus is changed
$i3->subscribe(
    {
        window => sub {
            my $event = shift;
            if ( $event->{change} eq 'focus' ) {
                say "Window focus event detected.";
                update_and_send_commands();
            }
        },
        shutdown => sub {
            say "Shutting down.";
            exit(0);
        }
    }
)->recv->{success} or die "Could not subscribe to events.";

# kill program if communication with i3 errors
$i3->subscribe(
    {
        _error => sub {
            my ($msg) = @_;
            say "Error: $msg";
            exit(1);
        }
    }
)->recv;

# update the status line every 30 seconds
my $timer;
$timer = AnyEvent->timer(
    after    => 30,
    interval => 30,
    cb       => sub {
        say "30 seconds passed.";
        update_and_send_commands();
    }
);

# update when AC status changes
my $ac_online_file = '/sys/class/power_supply/AC/online';
my $last_state     = undef;
my $watcher        = AnyEvent->timer(
    after    => 0,      # Start immediately
    interval => 5,      # Poll every 5 seconds
    cb       => sub {
        open my $fh, '<', $ac_online_file or do {
            warn "Cannot open $ac_online_file: $!";
            return;
        };
        my $current_state = <$fh>;
        close $fh;
        chomp($current_state);

        # Trigger updates only if the state has changed
        if ( !defined($last_state) || $current_state ne $last_state ) {
            $last_state = $current_state;
            say "AC state changed to: $current_state";
            update_and_send_commands();
        }
    }
);

AE::cv->recv;

__END__

=pod

=head1 NAME

i3-title-status - Print system information to the focused window's title bar

=head1 SYNOPSIS

  i3-title-status [--format '<format string>'] [--help]

=head1 DESCRIPTION

Prints system status information into the title bar of the currently focused window.
Updates on window focus events, every 30 seconds, and when AC is plugged/unplugged.

=head1 OPTIONS

=over 4

=item * --help

=item * --format

Specify a custom format for the status information. Valid substitutions are:

=over 4

=item * %title

=item * %clock

=item * %battery_level

=item * %battery_status

=item * %battery_symbol

=back

=back

=head1 AUTHOR

Daniel Hennigar

=head1 LICENSE

Licensed under the Artistic License 2.0 and GNU GPL.

=cut
