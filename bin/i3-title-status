#!/usr/bin/perl

# i3-title-status.pl --- print status info in the focused window title bar

# Copyright (c) 2024 Daniel Hennigar

# This program is free software; you can redistribute it and/or modify
# it under the terms of either:
#
#   a) the Artistic License 2.0, or
#   b) the GNU General Public License as published by the Free Software
#      Foundation; either version 3, or (at your option) any later version.
#
# See the LICENSE file for more information.

use 5.040;
use Carp;
use Readonly;
use Getopt::Std;

# use Pod::Usage;
use English      qw(-no_match_vars);
use AnyEvent::I3 qw(:all);
use POSIX        qw(strftime);
use i3::Utils;

sub VERSION {
    return $i3::Utils::VERSION;
}

Readonly my $THRESHOLD => 10;
my $warning         = 0;
my $battery_was_low = 0;
my $format = '[%clock][%date][%battery_charge% %battery_status] %title';

$Getopt::Std::STANDARD_HELP_VERSION = 1;
my %opts;
getopts( 'f:wt:', \%opts );
if ( $opts{f} ) {
    $format = $opts{f};
}
$warning = $opts{w};
my $threshold = $opts{t} // $THRESHOLD;

my $i3 = i3();
$i3->connect->recv or croak 'Error connecting to i3.';

sub update_and_send_commands {

    # clock
    my $clock = strftime( '%H:%M',    localtime );
    my $date  = strftime( '%d-%b-%Y', localtime );

    # battery charge
    my $battery_charge;
    {
        open my $fh, '<', '/sys/class/power_supply/BAT0/capacity'
          or croak "$OS_ERROR";
        $battery_charge = <$fh>;
        close $fh or carp "Failed to close file handle: $OS_ERROR";
    }
    chomp $battery_charge;

    # battery status
    my $battery_status;
    {
        open my $fh, '<', '/sys/class/power_supply/BAT0/status'
          or croak "$OS_ERROR";
        $battery_status = <$fh>;
        close $fh or carp "Failed to close file handle: $OS_ERROR";
    }
    chomp $battery_status;

    my %battery_symbols = (
        'Discharging' => q(-),
        'Charging'    => q(+)
    );
    my $battery_symbol = $battery_symbols{$battery_status} // undef;

    # format string
    my $status = $format;
    $status =~ s/%clock/$clock/gxms;
    $status =~ s/%date/$date/gxms;
    $status =~ s/%battery_charge/$battery_charge/gxms;
    $status =~ s/%battery_status/$battery_status/gxms;
    $status =~ s/%battery_symbol/$battery_symbol/gxms;

    # send command
    $i3->command(
        "[workspace=__focused__] title_format \"%title\"; title_format $status"
    );

    # change the window border color based on battery status
    if ($warning) {
        if ( int($battery_charge) <= $threshold
            && $battery_status eq 'Discharging' )
        {
            if ( !$battery_was_low ) {
                $battery_was_low = 1;
                $i3->command(
                    'client.focused "#FF0000" "#FF0000" "#FFFFFF" "#FF0000"');
            }
        }
        else {
            if ($battery_was_low) {
                $battery_was_low = 0;
                $i3->command(
                    'client.focused "#3660d0" "#3660d0" "#FFFFFF" "#4670e0"');
            }
        }
    }
    return 0;
}

# update status line when window focus is changed
$i3->subscribe(
    {
        window => sub {
            my $event = shift;
            if ( $event->{change} eq 'focus' ) {
                update_and_send_commands();
            }
        },
        shutdown => sub {
            exit 0;
        }
    }
)->recv->{success} or croak 'Could not subscribe to events.';

# kill program if communication with i3 errors
$i3->subscribe(
    {
        _error => sub {
            my ($msg) = @_;
            croak "Error: $msg";
        }
    }
)->recv;

# update the status line every 30 seconds
my $timer;
$timer = AnyEvent->timer(
    after    => 30,
    interval => 30,
    cb       => sub {
        update_and_send_commands();
    }
);

# update when AC status changes
my $ac_online_file = '/sys/class/power_supply/AC/online';
my $last_state     = undef;
my $watcher        = AnyEvent->timer(
    after    => 0,      # Start immediately
    interval => 5,      # Poll every 5 seconds
    cb       => sub {
        open my $fh, '<', $ac_online_file or do {
            carp "Cannot open $ac_online_file: $OS_ERROR";
            return;
        };
        my $current_state = <$fh>;
        close $fh or croak "$OS_ERROR";
        chomp $current_state;

        # Trigger updates only if the state has changed
        if ( !defined($last_state) || $current_state ne $last_state ) {
            $last_state = $current_state;
            update_and_send_commands();
        }
    }
);

AE::cv->recv;

__END__

=pod

=head1 NAME

i3-title-status - version C<$VERSION>

=head1 USAGE

    i3-title-status [OPTIONS]

=head1 DESCRIPTION

Prints system status information into the title bar of the currently focused window.
Updates on window focus events, every 30 seconds, and when AC is plugged/unplugged.

=head1 OPTIONS

=over 4

=item * --help

=item * --format

Specify a custom format for the status information. Valid substitutions are:

=over 4

=item * %title

=item * %clock

=item * %battery_level

=item * %battery_status

=item * %battery_symbol

=back

=back

=head1 AUTHOR

Daniel Hennigar

=head1 LICENSE AND COPYRIGHT

Copyright (C) 2025 Daniel Hennigar

Licensed under the Artistic License 2.0 and GNU GPL.

This program is free software; you can redistribute it and/or modify
it under the terms of either:

a) the Artistic License 2.0, or

b) the GNU General Public License as published by the Free Software
Foundation; either version 3, or (at your option) any later version.

See the LICENSE file for more information.

=cut
