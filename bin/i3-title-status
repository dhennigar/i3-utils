#!/usr/bin/perl

# sway-title-status.pl --- print status info in the focused window title bar

# Copyright (c) 2024 Daniel Hennigar

# This program is free software; you can redistribute it and/or modify
# it under the terms of either:
#
#   a) the Artistic License 2.0, or
#   b) the GNU General Public License as published by the Free Software
#      Foundation; either version 3, or (at your option) any later version.
#
# See the LICENSE file for more information.

use 5.032;
use strict;
use warnings;
use Getopt::Long;
use File::Spec;
use EV;
use AnyEvent::I3;

my $usage = "Usage: $0 [--help]";
my $help  = 0;
GetOptions( 'help' => \$help )
  or die "$usage";
die "$usage" if $help;

# Connect to i3 and die if connection is lost
my $i3 = i3();
$i3->connect->recv or die "Error connecting to i3.";
say "Connected to i3.";

# Get system status information and print to the focused window's title bar
sub update_and_send_commands {
    chomp( my $timestring = qx(date "+%H:%M") );
    chomp( my $battstring = qx(cat /sys/class/power_supply/BAT0/capacity) );
    chomp( my $battstatus = qx(cat /sys/class/power_supply/BAT0/status) );

    my %batthash = (
        "Discharging" => "-",
        "Charging"    => "+"
    );
    my $battsymbol = $batthash{$battstatus} // "";

    say "Updating title bar status info.";
    $i3->command('[all] title_format "%title"');
    $i3->command( 'title_format "['
          . $timestring . ']['
          . $battstring . '%'
          . $battsymbol
          . '] %title"' );
}

# Subscribe to window focus events and update status info
$i3->subscribe(
    {
        window => sub {
            my $event = shift;
            if ( $event->{change} eq 'focus' ) {
                say "Window focus event detected.";
                update_and_send_commands();
            }
        },
        tick => sub {
            my $tick = shift;
            if ( !$tick->{first} && $tick->{payload} eq 'title-status' ) {
                update_and_send_commands();
            }
        },
        shutdown => sub {
            say "Shutting down i3-title-status.";
            exit(0);
        }
    }
)->recv->{success} or die "Error subscribing to window events.";

# Also update status every 60 seconds to keep the clock accurate
my $timer;
$timer = AnyEvent->timer(
    after    => 60,
    interval => 60,
    cb       => sub {
        say "60 seconds passed.";

        # Use a non-blocking callback to handle the response of send_tick
        $i3->send_tick('title-status')->cb(
            sub {
                my $response = shift->recv;

                unless ( $response->{success} ) {
                    warn "Lost connection to i3.";

                    # Clean up the timer
                    undef $timer;
                    exit(1);    # Exit the script gracefully
                }
            }
        );
    }
);

AE::cv->recv
